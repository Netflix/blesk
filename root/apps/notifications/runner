#! /usr/bin/env python2.7

# $Id: //depot/cloud/rpms/nflx-cloudsol-python-libs/root/apps/nflx-cloudsol-python-libs/Discovery/__init__.py#47 $
# $Header: //depot/cloud/rpms/nflx-cloudsol-python-libs/root/apps/nflx-cloudsol-python-libs/Discovery/__init__.py#47 $
# $Date: 2012/02/10 $
# $DateTime: 2012/02/10 20:35:40 $
# $Change: 1268046 $
# $File: //depot/cloud/rpms/nflx-cloudsol-python-libs/root/apps/nflx-cloudsol-python-libs/Discovery/__init__.py $
# $Revision: #47 $
# $Author: rrapoport $

import json
import logging
import re
import sys
import time

import Availability
import Cassandra
import config
import Discovery
import NflxServer
import pycassa
import requests

if __name__ == "__main__":
    a = Availability.EpicAvailabilityGetter(environment = "prod", debug = True)
    print "Talking to Availability History in %s" % config.env
    ah = Availability.AvailabilityHistory(environment = "prod", debug = True)
    loader = Availability.Loader(a, ah, debug = True)

    if len(sys.argv) > 1:

        if sys.argv[1] == "data_rows":
            for i in ah.data_rows():
                print i 
            
        if sys.argv[1] == "convert_target":
            ah.convert_availability_target()

        if sys.argv[1] == "authenticationserviceload":
            loader.load("authenticationservice")

        if sys.argv[1] == "abcloudload":
            loader.load("abcloud")

        if sys.argv[1] == "load":
            # nightly loader
            loader.autoload()

        if sys.argv[1] == "bench":
            start = time.time()
            for count in xrange(1,6):
                ret = ah.availability_report(days = 5, cluster = "abcloud")
            end = time.time()
            diff = end-start
            avg=diff/5
            print "%d iterations took %.2f seconds, avg %.2f" % (count, diff, avg)

        if sys.argv[1] == "availability":
            for days in xrange(1,6):
                start = time.time()
                ret = ah.availability_report(days = days, cluster = "abcloud")
                end = time.time()
                print ret
                print "%d days took %.2f seconds" % (days, end-start)

        if sys.argv[1] == "abcloudservices":
            services = a.services_for_cluster("abcloud")
            print services

        if sys.argv[1] == "short":
            s = time.time()
            services = a.services_for_cluster("abcloud")
            print "services: %s" % services
            print "%.2f seconds to get services for abcloud" % (time.time()-s)
            metrics = a.metrics_for_service('abcloud', services[0], hours_previous = 1, filter = False)
            print metrics 

        if sys.argv[1] == "clusters":
            clusters = a.clusters()
            print "clusters: %s" % clusters

        if sys.argv[1] == "timeabcloudservices":
            start = time.time()
            ctr = 0 
            while ctr < 10:
                ctr += 1
                services = a.services_for_cluster("abcloud")
            diff = time.time() - start
            print "%d iterations of services_for_cluster took %.2f seconds, or %.2f/per" % (ctr, diff, diff/ctr)

        if sys.argv[1] == "settargets":
            # initial loader
            for cluster in "platformservice abcloud subscribercloud authenticationservice dms cryptex".split():
                services = a.services_for_cluster(cluster)
                for service in services:
                    print "Adding %s/%s" % (cluster, service)
                    ah.store_availability_target(cluster, service, 99.5, "TotalTimeMillis95Percentile", 15000)

        if sys.argv[1] == "megainit":
            # initial loader
            existing = ah.get_availability_target()
            for cluster in a.clusters():
                services = a.services_for_cluster(cluster)
                for service in services:
                    if service in existing.get(cluster, {}):
                        print "%s/%s already exist -- skipping" % (cluster, service)
                        continue
                    print "Adding %s/%s" % (cluster, service)
                    ah.store_availability_target(cluster, service, 99.5, "TotalTimeMillis95Percentile", 15000)
